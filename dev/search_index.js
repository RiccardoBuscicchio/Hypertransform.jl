var documenterSearchIndex = {"docs":
[{"location":"#Hypertransform.jl","page":"Home","title":"Hypertransform.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for Hypertransform.jl! The package implements the two trasformations as described in [1].","category":"page"},{"location":"#Hypertriangulation","page":"Home","title":"Hypertriangulation","text":"","category":"section"},{"location":"#Hypertransform.hypertriangulate","page":"Home","title":"Hypertransform.hypertriangulate","text":"hypertriangulate(x::AbstractArray; bounds::Tuple{<:Real, <:Real} = (0.0, 1.0))\n\nMaps a vector or matrix from hypercube space to hypertriangle space, scaling each element to the specified bounds.\n\nThe hypercube is the space the samplers usually work in; the      components of x are in no particular order.\n\nThe hypertriangle is the space where the components are sorted into\nascenting order, ( y0 < y1 < ... < yn ). \n\nThe (unit) transformation is defined by:\n\n.. math::\n    y_j = 1 - \\prod_{i=0}^{j} (1 - x_i)^{1/(n-i)}\n\nExample application. If we are analysing a number num_dim of DWD \nsources, all with identical priors. Then this function would be\ncalled on the array `np.array([f_1, f_2, ..., f_num_sources])` with\n`bounds=(f_min, f_max)`.\n\nArguments\n\nx: An array, either a vector of length n or a matrix of size (m, n), where each row represents a point in hypercube space.\nbounds: A tuple (lower, upper) specifying the minimum and maximum values for the output range. Defaults to (0.0, 1.0).\n\nReturns\n\nAn array of the same shape as x, with each element transformed to lie within the specified bounds in hypertriangle space.\n\nExample\n\nusing Hypertransform\nx = [0.5, 0.75]\nbounds = (0.0, 1.0)\ny = hypertriangulate(x, bounds=bounds)\n\nRaises\n\nArgumentError: If any element of x is outside the specified bounds.\n\n\n\n\n\n","category":"function"},{"location":"#Hypercubification","page":"Home","title":"Hypercubification","text":"","category":"section"},{"location":"#Hypertransform.hypercubify","page":"Home","title":"Hypertransform.hypercubify","text":"hypercubify(y::AbstractArray; bounds::Tuple{<:Real, <:Real} = (0.0, 1.0))\n\nTransform a vector or matrix from the hypertriangle space back to the hypercube.\n\nArguments\n\ny: A vector of length n or a matrix of size (m, n) where each row is a point in the hypertriangle space.\nbounds: A tuple (lower, upper) defining the target parameter bounds. Defaults to (0.0, 1.0).\n\nReturns\n\nTransformed vector or matrix of the same shape as input, mapped back to the hypercube space.\n\n\n\n\n\n","category":"function"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"R. Buscicchio, E. Roebber, J. M. Goldstein and C. J. Moore. Label switching problem in Bayesian analysis for gravitational wave astronomy. Phys.Rev.D 100, 084041 (2019), arXiv:1907.11631 [astro-ph.IM].\n\n\n\n","category":"page"}]
}
